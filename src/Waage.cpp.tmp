
#__FILE__ _"/home/ldapusers/istlukoeh/swe_workspace/UML/../src/Waage.cpp" 0
//@(#) Waage.cpp


                 
#__FILE__ _"/home/ldapusers/istlukoeh/swe_workspace/UML/../src/Waage.h" 0
//@(#) Waage.h

                 
                 

                         
#__FILE__ _"/home/ldapusers/istlukoeh/swe_workspace/UML/../src/ObserverWaage.h" 0
//@(#) ObserverWaage.h

                         
                         

//Abstrakter Observer des Observer Patterns
class ObserverWaage
{
	
public:
	//
	ObserverWaage();
	//
	virtual void update() = 0;
	//
	virtual ~ObserverWaage();
	
};

      

#__FILE__ _"/home/ldapusers/istlukoeh/swe_workspace/UML/../src/Waage.h" 9
                        
#__FILE__ _"/home/ldapusers/istlukoeh/swe_workspace/UML/../src/SubjectWaage.h" 0
//@(#) SubjectWaage.h

                        
                        

                
                         
#__FILE__ _"/home/ldapusers/istlukoeh/swe_workspace/UML/../src/ObserverWaage.h" 0
//@(#) ObserverWaage.h

                         
                         

                                           
                   
 
	
       
	  
	                
	  
	                          
	  
	                         
	
  

      

#__FILE__ _"/home/ldapusers/istlukoeh/swe_workspace/UML/../src/SubjectWaage.h" 10

using namespace std;

//Abstraktes Subjekt des Observer Patterns.
class SubjectWaage
{
	
public:
	//
	virtual void attach(const ObserverWaage * client) = 0;
	//
	virtual void detach(const ObserverWaage * client) = 0;
	//
	virtual void notify() = 0;
	//
	SubjectWaage();
	//
	virtual ~SubjectWaage();
	
private:
	//
	std::vector<ObserverWaage *> observerWaage;
	
};

      

#__FILE__ _"/home/ldapusers/istlukoeh/swe_workspace/UML/../src/Waage.h" 10

//Wird kontrolliert von Simulation und ermittelt das Gewicht des Mischbehaelters. Ueber notify() werden die Observer angesto√üen.
class Waage: SubjectWaage
{
public:
	//
	void decrement();
	//
	int getAbsolutGewicht() const;
	//
	int getDeltaGewicht() const;
	//
	void increment(int step);
	//
	void notify();
	//
	void resetDeltaGewicht();
	//
	virtual void attach(const ObserverWaage * client);
	//
	virtual void detach(const ObserverWaage * client);
	//
	Waage();
	
private:
	//
	int absolutGewicht;
	
	//
	int deltaGewicht;
	
	
};

      

#__FILE__ _"/home/ldapusers/istlukoeh/swe_workspace/UML/../src/Waage.cpp" 4
//
Waage::Waage()
{
	absolutGewicht = 0;
	deltaGewicht = 0;
}

//
void Waage::decrement()
{
	
}

//
void Waage::notify()
{
	
}

//
int Waage::getAbsolutGewicht() const
{
	return absolutGewicht;
}

//
void Waage::increment(int step)
{
	
}

//
void Waage::resetDeltaGewicht()
{
	
}

//
int Waage::getDeltaGewicht() const
{
	return deltaGewicht;
}

//
void Waage::attach(const ObserverWaage * client) {

}

//
void Waage::detach(const ObserverWaage * client) {

}
